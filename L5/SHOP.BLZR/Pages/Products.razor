@page "/products"
@using Shared.Models.Dto
@using Shared.Services
@using System.Collections.ObjectModel
@using Shop.BLZR.Services.ServicesDto

<PageTitle>Products</PageTitle>

<h1>Products</h1>

<p>This component demonstrates showing products.</p>

@if (products == null)
{
    <p><em>Loading products...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Price</th>
                <th>Category</th>
                <th>Stock (Quantity)</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>
                        <input type="text" class="form-control" value="@product.Name" @oninput="(e) => product.Name = e.Value.ToString()" />
                    </td>
                    <td>
                        <input type="number" class="form-control" value="@product.Price"
                        @oninput="(e) => UpdatePrice(product, e.Value.ToString())" />

                    </td>
                    <td>
                        <select class="form-control" @onchange="(e) => product.CategoryId = int.Parse(e.Value.ToString())">
                            @foreach (var category in categories)
                            {
                                <option value="@category.CategoryId" selected="@(category.CategoryId == product.CategoryId)">
                                    @category.Name
                                </option>
                            }
                        </select>
                    </td>



                    <td>
                        <input type="number" class="form-control" value="@GetStockQuantity(product.StockId)"
                        @oninput="(e) => UpdateStockQuantity(product.StockId, e.Value.ToString())" />
                    </td>

                    <td>
                        <button class="btn btn-primary" @onclick="() => SaveProduct(product)">Save</button>
                        <button class="btn btn-danger" @onclick="() => DeleteProduct(product)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

}

@code {
    private ObservableCollection<CategoryDto>? categories;
    private ObservableCollection<ProductDto>? products;
    private ObservableCollection<StockDto>? stocks;

    private ProductDto filterData = new ProductDto();
    private ProductDto sortBy = new ProductDto();
    private bool sortRising = true;
    int pageNumber = 1;
    int pageSize = 10;

    [Inject] private ICategoryServiceDto _categoryService { get; set; } = null!;
    [Inject] private IProductServiceDto _productService { get; set; } = null!;
    [Inject] private IStockServiceDto _stockService { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        // Symulacja opóźnienia, aby pokazać ładowanie
        await Task.Delay(500);

        // Załaduj kategorie, produkty i stany magazynowe
        await LoadCategories();
        await LoadStocks();
        await LoadProducts();
    }

    private async Task LoadCategories()
    {
        var categoryResponse = await _categoryService.GetAllAsync();
        if (categoryResponse.Success)
        {
            categories = new ObservableCollection<CategoryDto>(categoryResponse.Data);
        }
    }

    private async Task LoadProducts()
    {
        filterData.Name = null;
        filterData.Price = null;
        filterData.CategoryId = null;
        filterData.StockId = null;
        sortBy.StockId = 1;
        sortRising = false;
        pageNumber = 2;
        pageSize = 10;
        var productResponse = await _productService.GetAllAsync();
        if (productResponse.Success)
            products = new ObservableCollection<ProductDto>(productResponse.Data);
        productResponse = await _productService.GetFilteredProducts(products, categories, stocks, filterData, sortBy, sortRising, pageNumber, pageSize);
        if (productResponse.Success)
            products = new ObservableCollection<ProductDto>(productResponse.Data);
    }

    private async Task LoadStocks()
    {
        var stockResponse = await _stockService.GetAllAsync();
        if (stockResponse.Success)
        {
            stocks = new ObservableCollection<StockDto>(stockResponse.Data);
        }
    }

    private string GetCategoryName(int? categoryId)
    {
        var category = categories?.FirstOrDefault(c => c.CategoryId == categoryId);
        return category?.Name ?? "Unknown";
    }

    private int GetStockQuantity(int? stockId)
    {
        var stock = stocks?.FirstOrDefault(s => s.StockId == stockId);
        return stock?.Quantity ?? -1;
    }

    private async Task DeleteProduct(ProductDto product)
    {
        if (product == null)
                return;

        var response = await _productService.DeleteAsync(product.Id);
        if (response.Success)
        {
            products.Remove(product);
            StateHasChanged();
        }
    }

    private async Task SaveProduct(ProductDto product)
    {
        if (product == null)
            return;

        var stock = stocks.FirstOrDefault(s => s.StockId == product.StockId);
        var productResponse = await _productService.UpdateAsync(product.Id, product);
        var stockResponse = await _stockService.UpdateAsync(product.StockId, stock);
        if (productResponse.Success && stockResponse.Success)
        {
            StateHasChanged();
        }
    }

    private void UpdatePrice(ProductDto product, string? value)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            product.Price = 0; // Lub jakakolwiek inna wartość domyślna, np. `null` jeśli Price jest typu nullable.
        }
        else if (decimal.TryParse(value, out var parsedValue))
        {
            product.Price = parsedValue;
        }
    }

    private void UpdateStockQuantity(int? stockId, string? value)
    {
        if (stocks == null) return;

        // Znajdź odpowiedni obiekt stanu magazynowego
        var stock = stocks.FirstOrDefault(s => s.StockId == stockId);
        if (stock == null) return;

        if (string.IsNullOrWhiteSpace(value))
        {
            stock.Quantity = 0; // Lub ustaw wartość domyślną, np. `null`, jeśli `Quantity` jest nullable
        }
        else if (int.TryParse(value, out var parsedValue))
        {
            stock.Quantity = parsedValue;
        }
    }

}
